# 3. Есть два списка:
# tutors = [
#     'Иван', 'Анастасия', 'Петр', 'Сергей',
#     'Дмитрий', 'Борис', 'Елена'
# ]
# klasses = [
#     '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>),
# например:
#
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
#
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
# (<tutor>, None), например:
#
# ('Станислав', None)
#
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
# Подумать, в каких ситуациях генератор даст эффект.

tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена', 'Анастасия', 'Петр'
]

klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]


def generate(tutors, klasses):
    ''' '''
    klasses_none = [i for i in klasses]
    if len(tutors) > len(klasses):
        for i in range(0, len(tutors) - len(klasses)):
            klasses_none.append(None)
    for i in range(0, len(tutors)):
        res = [tutors[i], klasses_none[i]]
        res = tuple(res)
        yield res


print(f'\n Результат работы:')
for i in generate(tutors, klasses):
    print(i)
print(f'\nПроверка что создал имено итератор: ')
run = generate(tutors, klasses)
print(type(run))



