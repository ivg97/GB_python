# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству
# ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление
# до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт
# строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт
# строку: *****\n*****\n*****.


class Cell():
    def __init__(self, cell_quantity):
        self.cell_quantity = cell_quantity
        # self.row_cell = row_cell

    def __add__(self, other):
        return self.cell_quantity + other.cell_quantity

    def __sub__(self, other):
        if self.cell_quantity - other.cell_quantity > 0:
            return self.cell_quantity - other.cell_quantity
        else:
            return f'Error: negative value error '


    def __mul__(self, other):
        return self.cell_quantity * other.cell_quantity

    def __floordiv__(self, other):
        return self.cell_quantity // other.cell_quantity


    def make_order(self, row_sell):
        row = self.cell_quantity//row_sell
        return ((("*" * row_sell) +"\\n") * row) + "*" * (self.cell_quantity % row_sell)


cell_1 = Cell(12)
print(cell_1.make_order(5))
cell_2 = Cell(9)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)

